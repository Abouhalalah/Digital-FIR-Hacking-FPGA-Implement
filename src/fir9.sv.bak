module fir9( 
	input logic clk, 
	input logic rst, 
	input logic [3:0]x, 
	input logic [10:0]thresh, 
	input logic [3:0] c [8:0],
	output logic y
); 

logic [3:0] x_reg [0:8];
logic [3:0] c_reg [0:8];
logic y_reg;
logic [10:0] thresh_reg;
logic [10:0] sum_reg;

always_ff@(posedge clk, posedge rst) begin

	for (int tap = 0; tap < 9; tap++) begin

		if(rst)begin

			x_reg[tap] <= 0;
			c_reg[tap] <= 0;
			thresh_reg <= 0;
		end
		else if (tap == 0)begin

                	x_reg[0] <= x;
			c_reg[0] <= c[0];
		end
		else begin

			x_reg[tap] <= x_reg[tap-1];
			c_reg[tap] <= c[tap];

		end

		thresh_reg <= thresh;
		y <= y_reg;

	end
end

always_comb begin

	sum_reg = 0;

	for (int tap =0; tap < 9; tap++) begin

		sum_reg = sum_reg + x_reg[tap]*c_reg[tap];

	end


	if (sum_reg < thresh_reg) 
		y_reg = 0;
	
	else 
		y_reg = 1;
	

end
		
endmodule
